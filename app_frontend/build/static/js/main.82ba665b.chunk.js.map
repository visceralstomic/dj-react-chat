{"version":3,"sources":["store/reducers/globalReducer.js","reportWebVitals.js","store/reducers/userReducer.js","store/reducers/chatReducer.js","services/globalAxios.js","services/userService.js","store/globalStore.js","components/userImage.js","components/chatMessage.js","services/chatService.js","components/participants.js","components/addUsers.js","components/roomSettingsMenu.js","components/chat.js","components/loginForm.js","components/formError.js","components/registerForm.js","components/authPage.js","components/roomList.js","components/chatForm.js","components/logout.js","utils/authRouter.js","App.js","index.js"],"names":["reducers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","userReducer","state","action","type","user","uid","data","id","username","photo","loading","chat","currentRoom","rooms","participants","initState","reducer","filter","room","newParticipants","Object","keys","reduce","acc","prop","SOCKET_URL","baseURL","axios_instance","axios","create","withCredentials","xsrfHeaderName","xsrfCookieName","post","response","get","query","headers","GlobalStore","createContext","GlobalStoreProvider","children","useReducer","dispatch","useEffect","localStorage","getItem","UserService","catch","error","console","Provider","value","UserImage","className","src","width","height","alt","formatDate","date","Intl","DateTimeFormat","dateStyle","timeStyle","format","Date","ChatMessage","props","author","text","roomId","room_id","delete","log","Participants","useContext","chatRoom","ListGroup","map","participant","ListGroupItem","creator","style","color","onClick","event","window","confirm","ChatService","cursor","AddUsers","useState","users","setUsers","toAdd","err","handleCheck","target","checked","parseInt","length","Label","check","Input","onChange","Button","promises","i","push","chatService","Promise","all","forEach","partic","userPartic","find","newParticipant","prevState","disabled","RoomSettingsMenu","show","setShow","activeTab","setActiveTab","toggle","tab","handleClose","Modal","isOpen","size","backdrop","centered","keyboard","ModalHeader","ModalBody","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","ModalFooter","variant","Chat","messages","setMessages","newMessage","setNewMessages","setToggle","socket","useRef","chatLogRef","current","scrollIntoView","behavior","WebSocket","addEventListener","send","JSON","stringify","parse","command","message","close","name","create_date","float","clear","ref","cols","rows","trim","LoginForm","setUsername","password","setPassword","loginError","setLoginError","history","useHistory","from","useLocation","pathname","Form","onSubmit","preventDefault","setItem","replace","setTimeout","FormGroup","for","invalid","FormError","FormFeedback","RegisterForm","password2","setPassword2","setPhoto","undefined","usernameError","setUsernameError","passwordError","setPasswordError","password2Error","setPassword2Error","photoError","setPhotoError","setError","formData","FormData","append","accept","files","AuthPage","RoomList","borderLeft","ChatForm","chatName","setChatName","formError","placeholder","required","tooltip","Logout","removeItem","AuthRouter","rest","auth","loggedIn","render","location","to","App","exact","path","Spinner","Jumbotron","fluid","Container","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82ba665b.chunk.js","sourcesContent":["import userReducer from \"./userReducer\";\nimport chatReducer from \"./chatReducer\";\n\n\nconst initState = {\n    user: {uid: '', username: '', photo: null},\n    chat: {\n        currentRoom: null,\n        rooms: [],\n        participants: []\n    },\n    loading: true\n}\n\nconst combineReducers = reducers => {\n    return (state, action) => {\n      return Object.keys(reducers).reduce(\n        (acc, prop) => {\n          return ({\n            ...acc,\n            ...reducers[prop]({ [prop]: acc[prop] }, action),\n          })\n        },\n        state\n      )\n    }\n  }\n\nconst reducer = combineReducers({\n    chat: chatReducer,\n    user: userReducer\n})\n\nexport {initState, reducer};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\n\nconst userReducer = (state, action) => {\n    switch (action.type) {\n        case \"SET_USER\":\n            return {\n                ...state,\n                user: {\n                        uid: action.data.id,\n                        username: action.data.username,\n                        photo: action.data.photo  \n                },\n                loading: false\n            }\n        case \"LOGOUT\":\n            return {\n                chat: {\n                    currentRoom: null,\n                    rooms: [],\n                    participants: []\n                },\n                user: {\n                        uid: '',\n                        username: '',\n                        photo: ''\n                },\n                loading: true\n            }\n        default: return state\n    }\n}\n\nexport default userReducer;","\nconst chatReducer = (state, action) => {\n    switch(action.type) {\n        case \"SET_CHAT_ROOM\":\n            return {\n                ...state,\n                chat: {\n                    ...state.chat,\n                    currentRoom: action.data\n                }\n            }\n        case 'ADD_CHAT_ROOM':\n            return {\n                ...state,\n                chat: {\n                    ...state.chat,\n                    rooms: [...state.chat.rooms, action.data]\n                }\n            }\n        case \"SET_ROOM_LIST\":\n            return  {\n                ...state,\n                chat: {\n                    ...state.chat,\n                    rooms: action.data\n                }\n            }\n        case \"DELETE_ROOM\":\n            const rooms = state.chat.rooms.filter(room => room.id !== action.data.id )\n            return {\n                ...state,\n                chat: {\n                    currentRoom: null,\n                    rooms: rooms,\n                    participants: []\n\n                }\n            }\n        case \"SET_PARTICIPANTS\":\n            return {\n                ...state,\n                chat: {\n                    ...state.chat,\n                    participants: action.data\n                }\n            }\n        case 'ADD_PARTICIPANT':\n            return {\n                ...state,\n                chat: {\n                    ...state.chat,\n                    participants: [...state.chat.participants, action.data]\n                }\n            }\n\n        case 'DELETE_PARTICIPANT':\n            const newParticipants = state.chat.participants.filter(user => user.id !== action.data.id)\n            return {\n                ...state,\n                chat: {\n                    ...state.chat,\n                    participants: newParticipants\n                }\n            }\n        case \"SET_NO_ROOM\":\n            return {\n                    ...state,\n                    chat: {\n                        ...state.chat,\n                        currentRoom: null,    \n                    }\n                }\n\n        default: return state \n    }\n}\n\nexport default chatReducer;","import axios from \"axios\";\n\nexport const DOMAIN = process.env.NODE_ENV === 'production' ? \"\" : \"localhost:8000\"\nexport const SOCKET_URL = `${process.env.NODE_ENV === 'production' ? \"wss\" : 'ws'}://${DOMAIN}`\nconst baseURL = `${process.env.NODE_ENV === 'production' ? \"https\" : 'http'}://${DOMAIN}`;\n\n\nconst axios_instance = axios.create({\n    baseURL: baseURL,\n    withCredentials: true, \n    xsrfHeaderName: 'X-CSRFToken',\n    xsrfCookieName: 'csrftoken'\n});\n\nexport default axios_instance;","import axios_instance from \"./globalAxios\";\n\n\nconst login = data => {\n    return axios_instance\n            .post(`/users/login/`, data)\n            .then(response => response.data);\n}\n\nconst logout = () => {\n    return axios_instance\n        .get(`/users/logout/`)\n        .then(response => response.data);\n}\n\nconst getUser = () => {\n    return axios_instance\n            .get('/users/get_user/')\n            .then(response => response.data)\n}\n\nconst getUsers = (query='') => {\n    return axios_instance\n            .get(`/users/?${query}`)\n            .then(response => response.data)\n}\n\nconst createUser = data => {\n    const config = {\n        headers: {\n            'content-type': 'multipart/form-data'\n        }\n    }\n    return axios_instance\n            .post('/users/', data, config)\n            .then(response => response.data)\n}\n\n\nexport default {\n    login,\n    logout,\n    getUser,\n    getUsers, \n    createUser\n}","import { createContext, useReducer, useEffect } from \"react\";\nimport { initState, reducer } from \"./reducers/globalReducer\";\nimport UserService from \"../services/userService\";\n\n\nexport const GlobalStore = createContext();\n\nconst GlobalStoreProvider = ({children}) => {\n    const [state, dispatch] = useReducer(reducer, initState);\n    useEffect(() => {\n          if (localStorage.getItem('IsLoggedIn')) {\n            UserService\n              .getUser()\n              .then(data => {\n\n                dispatch({\n                  type: 'SET_USER',\n                  data: {\n                      id: data.id,\n                      username: data.username,\n                      photo: data.photo\n                  }\n                })\n              })\n              .catch(error => {\n                console.error(error)\n              });\n          }\n      }, [])\n    \n    return (\n        <GlobalStore.Provider value={[state, dispatch]}>\n            {children}\n        </GlobalStore.Provider>\n    )\n}\n\nexport default GlobalStoreProvider;","import {FaUserAlt} from \"react-icons/fa\";\n\nconst UserImage = ({photo}) => {\n\n    return (\n        <>\n            {photo !== null ? <img \n                          className='user-photo' \n                          src={`${photo}`} \n                          width='37' \n                          height='37' \n                          alt='img' \n                            />: <FaUserAlt className='alt-user-photo' />}\n        </>\n    )\n}\n\nexport default UserImage; ","import UserImage from \"./userImage\";\n\n\nconst formatDate = date => {\n    return new Intl.DateTimeFormat(\n                'en-US',\n                {\n                  dateStyle: 'short',\n                  timeStyle: 'short'\n                }).format(new Date(date))\n  }\n\nconst ChatMessage = props => {\n    const {author, text, user, date} = props;\n    return (\n        <div className={`chat-message ${author.id === user.uid ? 'sender' : ''}`}>\n            \n            <UserImage \n                photo={author.photo && process.env.NODE_ENV === 'development' ? \"http://localhost:8000\" + author.photo : author.photo} \n            />\n            <div className=\"message-text\">\n                <div className=\"info-username\">{author.username}</div>\n                {text}\n                <div className=\"info-date\">\n                    {formatDate(date)}\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default ChatMessage;","\nimport axios_instance from \"./globalAxios\";\n\n\nconst createChat = data => {\n    return axios_instance\n            .post(\"/chat/room/\", data)\n            .then(response => response.data);\n}\n\nconst getRooms = () => {\n    return axios_instance\n            .get(\"/chat/room/\")\n            .then(response => response.data);\n}\n\n\nconst addUserToRoom = data => {\n    return axios_instance\n            .post(\"/chat/participant/\", data)\n            .then(response => response.data)\n}\n\nconst getRoomParticipants = roomId => {\n    return axios_instance\n            .get(`/chat/participant/?room_id=${roomId}`)\n            .then(response => response.data) \n}\n\nconst deleteRoom = room_id => {\n    return axios_instance\n            .delete(`/chat/room/${room_id}`)\n            .then(response => response.data)\n}\n\nconst deleteUserFromRoom = data => {\n    console.log('delete', typeof data)\n    return axios_instance\n            .delete(`/chat/participant/${data}`)\n            .then(response => response.data)\n}\n\nexport default {\n    createChat,\n    getRooms,\n    addUserToRoom,\n    getRoomParticipants,\n    deleteRoom,\n    deleteUserFromRoom\n}","import {useContext} from \"react\";\nimport { GlobalStore } from \"../store/globalStore\";\nimport ChatService from \"../services/chatService\";\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport {FaCrown, FaTrashAlt} from \"react-icons/fa\";\n\nconst Participants = () => {\n    const [state, dispatch] = useContext(GlobalStore);\n    const chatRoom = state.chat.currentRoom;\n    const {participants} = state.chat;\n\n    const handleDelete = (event, id) => {\n      if (window.confirm('Are you sure you want to delete this user from this room?')){\n        ChatService\n        .deleteUserFromRoom(id)\n        .then(data => {\n          dispatch({type: 'DELETE_PARTICIPANT', data: {id: id}})\n        })\n        .catch(error => {\n          console.error(error);\n        })\n      }\n    }\n    \n    return (\n        <ListGroup className='partic-list'>\n                    {participants.map(participant => {\n                      return <ListGroupItem className='partic-item' key={participant.id}>\n                                {participant.user.username}\n                                {participant.user.id === chatRoom.creator.id ? (\n                                    <FaCrown\n                                          style={{\n                                              color: 'hsl(353, 59%, 43%)'\n                                          }}\n                                    />\n                                ) : (\n                                  state.user.uid === chatRoom.creator.id ? (\n                                      <FaTrashAlt\n                                        onClick={(event) => handleDelete(event, participant.id)}\n                                        style={{\n                                          color: 'hsl(350, 99%, 50%)',\n                                          cursor: 'pointer'\n                                        }}\n                                      />\n                                  ) : (\n                                    null\n                                  )\n                                )} \n                            </ListGroupItem>\n                    })}\n       </ListGroup>\n    )\n}\n\nexport default Participants;","import {useState, useEffect, useContext} from \"react\";\nimport { Button, ListGroup, ListGroupItem , Label, Input} from 'reactstrap';\nimport UserService from \"../services/userService\";\nimport chatService from \"../services/chatService\";\nimport {GlobalStore} from \"../store/globalStore\";\n\n\nconst AddUsers = () => {\n    const [state, dispatch] = useContext(GlobalStore);\n    const [users, setUsers] = useState([]);\n    const chatRoom = state.chat.currentRoom;\n\n    useEffect(() => {\n        if (chatRoom) {\n            UserService\n                .getUsers(`part_room=${chatRoom.id}`)\n                .then(data => {\n                    setUsers(data.map(user => ({...user, toAdd: false}) ))\n                })\n                .catch(err => {\n                    console.log(err)\n                })\n        }\n    }, [chatRoom])\n\n    const handleCheck = event => {\n        const { checked, value } = event.target;\n        setUsers(users.map(user => user.id === parseInt(value) ? {...user, toAdd: checked} : user));\n    }\n\n    const AddUsersToRoom = event => {\n        if (window.confirm('Are you sure you want to add this user(s) to the room ?')) {\n            const promises = [];\n            for (let i in users) {\n                if (users[i].toAdd) {\n                    promises.push(chatService.addUserToRoom({user: users[i].id, room: state.chat.currentRoom.id}))\n                }\n            }\n            Promise.all(promises).then(data => {\n                data.forEach(partic => {\n                    const userPartic = users.find(user => user.id === partic.user)\n                    delete userPartic.toAdd\n                    const newParticipant = {id: partic.id, user: userPartic, room: partic.room }\n                    setUsers(prevState => prevState.filter(user => user.id !== partic.user))\n                    dispatch({type: \"ADD_PARTICIPANT\", data: newParticipant})\n                })\n            })\n        }\n        \n    }\n\n    return (\n        <>\n            <ListGroup  className='partic-list'>\n                        {users.length > 0 ? \n                        ( users.map(user => {\n                            return (\n                                <ListGroupItem\n                                    className='partic-item' \n                                    key={user.id}\n                                >\n                                    <Label check>\n                                        <Input \n                                            value={user.id}\n                                            type=\"checkbox\" \n                                            checked={users.toAdd}\n                                            onChange={handleCheck}\n                                        />\n                                        {user.username}\n                                    </Label>\n                                </ListGroupItem>\n                            )\n                        }) ) : (\n                            <div>\n                                There are no users to add\n                            </div>\n                        )}\n            </ListGroup>\n                    <Button \n                        onClick={AddUsersToRoom} \n                        disabled={users.length === 0 && true}\n                    >\n                        Add users to room\n                    </Button>\n        </>\n    )\n}\n\nexport default AddUsers;","import { useContext, useState } from \"react\";\nimport { GlobalStore } from \"../store/globalStore\";\nimport chatService from \"../services/chatService\";\nimport { Button, Modal, ModalHeader, ModalBody, TabContent, TabPane, Nav, NavItem, NavLink,\n  ModalFooter, ListGroup,  } from 'reactstrap';\nimport classnames from 'classnames';\nimport Participants from \"./participants\";\nimport AddUsers from \"./addUsers\";\n\n\nconst RoomSettingsMenu = ({show, setShow}) => {\n    const [activeTab, setActiveTab] = useState('1');\n    const [state, dispatch] = useContext(GlobalStore);\n    \n    const toggle = tab => {\n        if(activeTab !== tab) setActiveTab(tab);\n    }\n\n    const handleClose = () => setShow(false);\n\n    const handleDelete = event => {\n        if (window.confirm('Are you sure you want to delete this room ?')){\n          chatService\n            .deleteRoom(state.chat.currentRoom.id)\n            .then(data => {\n              dispatch({type: \"DELETE_ROOM\", data: {id: state.chat.currentRoom.id}})\n            })\n        }\n      }\n\n    return (\n        <Modal \n            isOpen={show} \n            size='sm' \n            toggle={handleClose} \n            backdrop={'static'} \n            centered={true} \n            keyboard={false}\n        >\n        <ModalHeader toggle={handleClose}>\n          Room menu\n        </ModalHeader>\n        <ModalBody>\n        <Nav tabs>\n            <NavItem className=\"tab-item\">\n                    <NavLink\n                        className={`${classnames({ active: activeTab === '1' })} text-dark`}\n                        onClick={() => { toggle('1'); }}\n                    >\n                        Participants\n                    </NavLink>\n            </NavItem>\n                {state.user.uid === state.chat.currentRoom.creator.id ? (\n                    <NavItem className=\"tab-item\">\n                        <NavLink\n                            className={`${classnames({ active: activeTab === '2' })} text-dark`}\n                            onClick={() => { toggle('2'); }}\n                        >\n                        Users\n                        </NavLink>\n                    </NavItem>\n                ) : (\n                    null\n                )}\n        </Nav>\n        <TabContent activeTab={activeTab}>\n            <TabPane tabId='1'>\n                <ListGroup className='partic-list'>\n                    <Participants />\n                </ListGroup>\n            </TabPane>\n            {state.user.uid === state.chat.currentRoom.creator.id ? (\n                <TabPane tabId='2'>\n                    <ListGroup className='partic-list'>\n                        <AddUsers />\n                    </ListGroup>\n                </TabPane>\n            ) : (\n                null\n            )}\n        </TabContent>\n        </ModalBody>\n        <ModalFooter>\n            {state.user.uid === state.chat.currentRoom.creator.id ? (\n                <Button color=\"danger\" onClick={handleDelete} >Delete</Button>\n            ) : (\n                null\n            )}\n            <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n        </ModalFooter>\n        </Modal>\n    )\n}\n\nexport default RoomSettingsMenu;","import {useState, useEffect, useRef, useContext} from \"react\";\nimport {GlobalStore} from \"../store/globalStore\";\nimport \"./chat.css\";\nimport ChatMessage  from \"./chatMessage\";\nimport Participants from \"./participants\";\nimport { Button} from 'reactstrap';\nimport chatService from \"../services/chatService\";\nimport { SOCKET_URL } from \"../services/globalAxios\";\nimport AddUsers from \"./addUsers\";\nimport {FaArrowLeft} from \"react-icons/fa\";\nimport RoomSettingsMenu from \"./roomSettingsMenu\";\n\nconst Chat = props => {\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessages] = useState('');\n    const [toggle, setToggle] = useState(false);\n    const [state, dispatch] = useContext(GlobalStore);\n    const [show, setShow] = useState(false);\n    const [showUsers, setShowUsers] = useState(false);\n    const socket = useRef(null);\n    const chatLogRef = useRef();\n    const chatRoom = state.chat.currentRoom;  \n\n    useEffect(() => {\n      chatLogRef.current.scrollIntoView({ behavior: \"auto\" });\n    }, [messages])\n\n    useEffect(() => {\n      if (chatRoom) {\n        chatService\n          .getRoomParticipants(chatRoom.id)\n          .then(data => {\n            dispatch({type: 'SET_PARTICIPANTS', data});\n          })\n      }\n      setNewMessages('');\n      setToggle(false);      \n    }, [chatRoom])\n\n    useEffect(()=> {\n        socket.current =  new WebSocket(`${SOCKET_URL}/ws/chat/${chatRoom.id}/`);\n        socket.current.addEventListener('open', (event) => {\n            console.log('OPEN!');\n            socket.current.send(JSON.stringify({\n              'command': 'fetch_messages'\n            }))\n          });\n      \n        socket.current.addEventListener('close', (event) => {\n            console.error(event)\n          });\n      \n        socket.current.addEventListener('message', (event) => {\n            const data = JSON.parse(event.data);\n            switch(data.command) {\n              case 'messages':\n                setMessages(data.messages);\n                break;\n              case 'new_message':\n                setMessages(prevState => [...prevState, data.message]);\n                setNewMessages('');\n                break;\n              default: break;\n            }    \n          });\n          return () => socket.current.close()\n    }, [chatRoom] )\n    \n    const sendMessage = event => {\n      if (newMessage.trim() !== '') {\n        socket.current.send(JSON.stringify({\n          'message': newMessage,\n          'command': 'new_message',\n          'from': {\n              'id': state.user.uid,\n              'username': state.user.username\n          }\n        }))\n      }\n        \n    }\n\n    return (\n        <div className='chat-area'>\n          \n            <div className=\"chat-header\">\n              <FaArrowLeft \n                onClick={() => {\n                  dispatch({\n                    type: 'SET_NO_ROOM'\n                  })\n                }}\n                className=\"to-side-bar\" \n              />\n              {chatRoom.name}\n              <div className=\"header-buttons\">\n                <Button onClick={() => setToggle(true)}>Menu</Button>\n              </div>\n            </div>\n            <div className=\"chat-log\" >\n              {messages.map(message => {\n                return   <ChatMessage\n                            key={message.create_date} \n                            author={message.author}\n                            text={message.text}\n                            user={state.user}\n                            date={message.create_date}\n                          />\n              })}\n              <div\n                style={{ float: \"left\", clear: \"both\" }}\n                ref={chatLogRef}\n              />\n            </div>\n            <div className=\"chat-input-panel\">\n                  <textarea\n                    className=\"message-input\"\n                    value={newMessage} \n                    onChange={({target}) => setNewMessages(target.value)} \n                    type=\"text\"\n                    cols=\"30\"\n                    rows=\"1\"\n                  />\n\n                  <Button onClick={sendMessage}>Send</Button>\n            </div>\n            <RoomSettingsMenu show={toggle} setShow={setToggle} />\n      </div>\n    )\n}\n\nexport default Chat;","import {useState, useContext} from \"react\";\nimport UserService from \"../services/userService\";\nimport {GlobalStore} from \"../store/globalStore\";\nimport {useLocation, useHistory} from \"react-router-dom\";\nimport { Button, Form, FormGroup, Label, Input, FormFeedback } from 'reactstrap';\n\nconst LoginForm = props => {\n    const { toggle, setToggle} = props;\n    const [state, dispatch] = useContext(GlobalStore);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [loginError, setLoginError] = useState(null);\n\n    let history = useHistory();\n    let location = useLocation();\n    let { from } = location.state || { from: { pathname: \"/\" } };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        UserService\n            .login({username, password})\n            .then(data => {\n\n                dispatch({\n                    type: 'SET_USER',\n                    data: {\n                        id: data.id,\n                        username: data.username,\n                        photo: data.photo\n                    }\n                });\n                localStorage.setItem('IsLoggedIn', true)\n                history.replace(from);\n            })\n            .catch(error => {\n                \n                setLoginError(error.response.data.error);\n                setTimeout(() => {\n                    setLoginError(null);\n                }, 7000);\n            })\n    }\n\n    return (\n        <>\n        <h3>Login</h3>\n        <Form onSubmit={handleSubmit}>\n            <FormGroup>\n                <Label for=\"usernameinput\">Username</Label>\n                <Input\n                    id=\"usernameinput\"\n                    type=\"text\" \n                    value={username}\n                    onChange={({target}) => setUsername(target.value)}\n                    invalid={loginError !== null} \n                />\n            </FormGroup>\n            <FormGroup >\n                <Label for=\"passwordinput\">Password</Label>\n                <Input\n                    id=\"passwordinput\" \n                    type=\"password\" \n                    value={password}\n                    onChange={({target}) => setPassword(target.value)}\n                    invalid={loginError !== null} \n                />\n            </FormGroup>\n            {loginError ? (\n                <FormGroup className=\"error-message\">\n                    {loginError}\n                </FormGroup>\n            ) : (\n                null\n            )}\n            <FormGroup className=\"form-btns\">\n                <Button>Log in</Button>\n                <span>\n                    Not registered ?  <br />  Then <span className=\"auth-toggle\" onClick={() => setToggle(!toggle)}>Sign up</span>\n                </span>\n            </FormGroup>\n        </Form>\n        </>\n    )\n}\n\nexport default LoginForm;","import { FormFeedback } from 'reactstrap';\n\nconst FormError = ({message}) => {\n    return (\n        <FormFeedback>\n            {message}\n        </FormFeedback>\n    )\n}\n\nexport default FormError;","import {useState} from \"react\";\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport UserService from \"../services/userService\";\nimport FormError from \"./formError\";\n\nconst RegisterForm = props => {\n    const { toggle, setToggle} = props;\n\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [password2, setPassword2] = useState('');\n    const [photo, setPhoto] = useState(null);\n\n    const [usernameError, setUsernameError] = useState(undefined);\n    const [passwordError, setPasswordError] = useState(undefined);\n    const [password2Error, setPassword2Error] = useState(undefined);\n    const [photoError, setPhotoError] = useState(undefined);\n    const [error, setError] = useState(null);\n\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        let formData = new FormData();\n        formData.append('username', username);\n        formData.append('password', password);\n        formData.append('password2', password2);\n        if (photo) {\n            console.log(photo)\n            formData.append('photo', photo, photo.name);\n        }\n\n        setUsernameError(undefined);\n        setPasswordError(undefined);\n        setPassword2Error(undefined);\n        setPhotoError(undefined);\n        setError(null);\n\n        UserService\n            .createUser(formData)\n            .then(data => {\n                setToggle(!toggle);\n            })\n            .catch(error => {\n                console.log(error.response.data)\n                for (let i in error.response.data) {\n                    switch (i) {\n                        case 'username':\n                            setUsernameError(error.response.data[i]);\n                            break;\n                        case 'password':\n                            setPasswordError(error.response.data[i]);\n                            break;\n                        case 'password2':\n                            setPassword2Error(error.response.data[i]);\n                            break;\n                        case 'photo':\n                            setPhotoError(error.response.data[i]);\n                            break;\n                        default:\n                            setError(error.response.data[i]);\n                    }\n                }\n            })\n\n    }\n\n    return (\n        <>\n            <h3>Register</h3>\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label for=\"usernameinput\">Username</Label>\n                    <Input\n                        id=\"usernameinput\"\n                        type=\"text\" \n                        value={username}\n                        onChange={({target}) => setUsername(target.value)}\n                        invalid={usernameError !== undefined} \n                    />\n                    {usernameError ? <FormError message={usernameError} /> : null}\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"passwordinput\">Password</Label>\n                    <Input\n                        id=\"passwordinput\" \n                        type=\"password\" \n                        value={password}\n                        onChange={({target}) => setPassword(target.value)}\n                        invalid={passwordError !== undefined || error !== null}  \n                    />\n                    {passwordError ? <FormError message={passwordError} /> : null}\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"passwor2dinput\">Repeat password</Label>\n                    <Input\n                        id=\"passwor2dinput\" \n                        type=\"password\" \n                        value={password2}\n                        onChange={({target}) => setPassword2(target.value)}\n                        invalid={password2Error !== undefined || error !== null}  \n                    />\n                    {password2Error ? <FormError message={password2Error} /> : null}\n                    {error ? <FormError message={error} /> : null}\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"userPhoto\">Photo</Label>\n                    <Input \n                        type=\"file\" \n                        name=\"file\" \n                        id=\"userPhoto\" \n                        accept=\"image/*\"\n                        onChange={({target}) => setPhoto(target.files[0])}\n                        invalid={photoError !== undefined} \n                    />\n                    {photoError ? <FormError message={photoError} /> : null}\n                </FormGroup>\n                <FormGroup className=\"form-btns\">\n                    <Button color=\"success\">Create account</Button>\n                    <span>\n                        Already registered?  <br />Then <span className=\"auth-toggle\" onClick={() => setToggle(!toggle)}>Log in</span>\n                    </span>\n                </FormGroup>\n            </Form>\n        </>\n    )\n}\n\nexport default RegisterForm;","import {useState} from \"react\";\nimport LoginForm from \"./loginForm\";\nimport RegisterForm from \"./registerForm\";\n\n\nconst AuthPage = props => {\n    const [toggle, setToggle] = useState(false);\n    return (\n        <div className=\"auth-container\">\n            {toggle ? (\n                <RegisterForm toggle={toggle} setToggle={setToggle}/>\n            ) : (\n                <LoginForm toggle={toggle} setToggle={setToggle}/>\n            )}\n        </div>\n    )\n}\n\nexport default AuthPage; ","import chatService from \"../services/chatService\";\nimport { useEffect, useContext } from \"react\";\nimport {GlobalStore} from \"../store/globalStore\";\nimport {FaCrown} from \"react-icons/fa\";\nimport './roomList.css';\n\nconst RoomList = props => {\n    const [state, dispatch] = useContext(GlobalStore);\n\n    useEffect(() => {\n        chatService\n            .getRooms()\n            .then(data => {\n\n                dispatch({type: 'SET_ROOM_LIST', data})\n            })\n            .catch(error => {\n                console.error(error)\n            })\n    }, [])\n    \n    return (\n        <div className=\"room-list\">\n            {state.chat.rooms.map(room => {\n                const style = {\n                    borderLeft: room.creator.id === state.user.uid ? '15px solid hsl(353, 59%, 43%)' : ''\n                } \n                return <button\n                            style={style} \n                            key={room.id} \n                            onClick={() => dispatch({type: 'SET_CHAT_ROOM', data: room})} \n                        >\n                        {room.name} {room.creator.id === state.user.uid \n                                        ? <FaCrown\n                                            style={{\n                                                color: 'hsl(353, 59%, 43%)'\n                                            }}\n                                          /> : null }\n                        </button>\n            })}\n        </div>\n    ) \n}\n\n\nexport default RoomList;","import {useState, useContext} from \"react\";\nimport ChatService from \"../services/chatService\";\nimport {GlobalStore} from \"../store/globalStore\";\nimport { Form, FormGroup, Input, FormFeedback, Button} from 'reactstrap';\n\n\nconst ChatForm = props => {\n    const [state, dispatch] = useContext(GlobalStore);\n    const [chatName, setChatName] = useState('');\n    const [formError, setError] = useState(null);\n\n    const handleChange = event => {\n      if (formError !== null) {\n        setError(null)\n      }\n      setChatName(event.target.value);\n    }\n\n    const handleClick = event => {\n        event.preventDefault();\n        if (chatName.trim() !== '') {\n          ChatService\n            .createChat({name: chatName})\n            .then(data => {\n              dispatch({type: 'ADD_CHAT_ROOM', data: {...data, creator: {id: state.user.uid, username: state.user.username}}})\n              setChatName('');\n            })\n            .catch( error => {\n              setError(error.response.data.name)\n            })\n        }\n      }\n    return (\n        <>  \n          <Form  onSubmit={handleClick}>\n            <FormGroup className=\"position-relative chat-form-input\">\n              <Input \n                  value={chatName} \n                  onChange={handleChange}\n                  placeholder=\"Add chat room\"\n                  invalid={formError !== null}\n                  required\n              />\n              <FormFeedback tooltip>{formError}</FormFeedback>\n            </FormGroup>\n            \n            <FormGroup>\n            <Button>Enter</Button>\n            </FormGroup>\n          </Form>\n\n        </>\n    )\n }\n\n export default ChatForm;\n","import {useContext} from \"react\";\nimport UserService from \"../services/userService\";\nimport { GlobalStore } from \"../store/globalStore\";\nimport {useHistory} from \"react-router-dom\";\nimport { Button} from 'reactstrap';\n\n\nconst Logout = props => {\n    const [state, dispatch] = useContext(GlobalStore);  \n    const history = useHistory();\n\n    const handleLogout = event => {\n        UserService\n          .logout()\n          .then(data => {\n            dispatch({type: 'LOGOUT'});\n            console.log('LOGOUT');\n            localStorage.removeItem('IsLoggedIn');\n            history.replace(\"/auth\");\n          })\n          .catch(error => {\n            console.log(error)\n          })\n      }\n    return (\n        <div>\n            <Button onClick={handleLogout} >Logout</Button>\n        </div>\n    )\n}\n\nexport default Logout;","import {Redirect, Route} from \"react-router-dom\";\n\n\nconst AuthRouter = ({children, auth, ...rest}) => {\n\n    const loggedIn = localStorage.getItem('IsLoggedIn');\n    return (\n        <Route\n            {...rest}\n            render={({location}) => \n                loggedIn ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/auth\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    )\n\n}\n\nexport default AuthRouter;","import {useContext} from \"react\";\nimport './App.css';\nimport Chat from \"./components/chat\";\nimport AuthPage from \"./components/authPage\";\nimport {GlobalStore} from \"./store/globalStore\";\nimport RoomList from \"./components/roomList\";\nimport ChatForm from \"./components/chatForm\";\nimport { Jumbotron, Container, Spinner } from 'reactstrap';\nimport Logout from \"./components/logout\";\nimport {BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport AuthRouter from \"./utils/authRouter\";\nimport UserImage from \"./components/userImage\";\n\n\nconst App = () => {\n  const [state, dispatch] = useContext(GlobalStore);\n  const chatRoom = state.chat.currentRoom;\n  \n  return (\n    <div className=\"app\">\n        <Router>\n        <Switch>\n          <AuthRouter exact path=\"/\">\n              <div className={`chat-container ${state.chat.currentRoom ? 'active-room' : 'no-active-room'}`}>\n\n              {!state.loading ? (\n                <>\n                   <div className=\"side-bar\" >\n\n                    <div className=\"side-header\">\n                      <div className=\"user-panel\">\n                        <UserImage photo={state.user.photo} />\n                        {state.user.username} \n                      </div>\n\n                      <div className=\"logout-panel\">\n                        <Logout />\n                      </div>\n                    </div>\n\n                    <div className=\"chat-form-panel\">\n                      <ChatForm />\n                    </div>\n\n                    <div className=\"side-menu\">\n                      <RoomList />\n                    </div>\n\n                  </div>\n\n                  <div className='main'>\n                    {chatRoom ? (\n                      <Chat /> \n                    ) : ( \n                      <div className='empty-main'>\n                        <Jumbotron fluid>\n                          <Container fluid>\n                            <h1 className=\"display-4\">Select chat room or create one</h1>\n                          </Container>\n                        </Jumbotron>\n                      </div>\n                    )}\n                  </div>\n                </>\n              ) : (\n                <div className='loader' >\n                  <Spinner  color=\"dark\"/> \n                  </div>\n              )} \n\n              </div>\n          </AuthRouter>\n\n        <Route exact path=\"/auth\">\n          <div className=\"auth-page\">\n            <AuthPage />\n          </div>\n        </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalStoreProvider from \"./store/globalStore\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStoreProvider>\n      <App />\n    </GlobalStoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}